#!/usr/bin/env python3

("""
Usage:
	modify time
	modify time <keyword>
	modify memory <mem> <mem_type>
	modify processors <nodes> <cores>
	modify nodes <nodes> <cores>
	modify cores <nodes> <cores>
	modify test on 
	modify test off 
	modify -h | --help

Options:
	-h --help		Shows this Screen
""")


from docopt import docopt
import os, sys

def getNewTime(run=1,days=None,hours=None,minutes=None):
	if run == 1:
		print("Please enter the following in the following format: DD-HH:MM\n")
	if days == None:
		days = input("Number of Days:\n[DD] >> ")
		if len(days) != 2:
			print("Incorrect format. Try Again.\n")
			days,hours,minutes = getNewTime(run=0)
			return days,hours,minutes
	if hours == None:
		hours = input("\nNumber of Hours:\n[HH] >> ")
		if len(hours) != 2:
			print("Incorrect format. Try Again.\n")
			days,hours,minutes = getNewTime(run=0,days=days)
			return days,hours,minutes
	if minutes == None:
		minutes = input("\nNumber of Minutes:\n[MM] >> ")
		if len(minutes) != 2:
			print("Incorrect format. Try Again.\n")
			days,hours,minutes = getNewTime(run=0,days=days,hours=hours)
			return days,hours,minutes
	return days,hours,minutes

def changeFile(old_line,new_line):
	for myFile in os.listdir():
		if keyword in myFile:
			new = []
			try:
				with open(myFile) as f:
					f = f.readlines()
					for l in f:
						if old_line in l:
							l = new_line
						new.append(l)
				with open(myFile,'w') as f:
					for l in new:
						f.write(l)
			except:pass

def removeTest():
	new = []
	with open("sander0.sh") as f:
		f = f.readlines()
		for l in f:
			if '--qos=test' in l:
				pass
			else:
				new.append(l)
	with open("sander0.sh",'w') as f:
		for l in new:
			f.write(l)

if __name__ == "__main__":
	doc = docopt(__doc__)
	#print(doc)
	if doc['time'] == True:
		keyword = 'sander'
		days,hours,minutes = getNewTime()
		old_line = "--time"
		new_line = "#SBATCH --time={}-{}:{}         # time (DD-HH:MM)\n".format(days,hours,minutes)
		changeFile(old_line,new_line)
		print("Updated run time to {}-{}:{} (DD-HH:MM)".format(days,hours,minutes))
	elif doc['memory'] == True:
		mem = doc['<mem>']
		mem_type = doc['<mem_type>']
		old_line = "--mem-per-cpu"
		new_line = "#SBATCH --mem-per-cpu={}{}   # memory per CPU core\n".format(mem,mem_type)
		changeFile(old_line,new_line)
		print("Updated Memory to {}{}".format(mem,mem_type))
	elif doc['nodes'] == True or doc['cores'] == True or doc['processors'] == True:
		nodes = doc['<nodes>']
		cores = doc['<cores>']
		old_line = "--nodes"
		new_line = "#SBATCH --nodes={} --ntasks-per-node={}\n".format(nodes,cores)
		changeFile(old_line,new_line)
		print("Updated to run on {} nodes and {} cores".format(nodes,cores))
	elif doc['test'] == True:
		if doc['on'] == True:		#GET TIME
			removeTest()
			old_line = "#SBATCH --requeue"
			new_line = "#SBATCH --requeue\n#SBATCH --qos=test\n"
			changeFile(old_line,new_line)
			print("Test turned ON. NOTE: This only applies to sander0.sh")
		elif doc['off'] == True:
			removeTest()
			print("Test turned OFF. NOTE: This only applies to sander0.sh")
