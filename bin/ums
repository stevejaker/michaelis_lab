#!/usr/bin/perl

$help_message = "Usage:\n\t-h | --help\t\tPrints This Message\n\n7 Arguments must be present:\n\tArg 1:\t\t\tType of Restraint (distance/dihedral)\n\tArg 2:\t\t\tName of Job\n\tArg 3:\t\t\tForce\n\tArg 4:\t\t\tAtom List (Must be a comma separated STRING with no spacing!)\n\tArg 5:\t\t\tStarting Value\n\tArg 6:\t\t\tEnding Value\n\tArg 7:\t\t\tReaction Temperature (in Kelvin)\n\n";
$username = getpwuid( $< );

if ($ARGV[0] eq "-h"||$ARGV[0] eq "--help") {
  print "$help_message";
  print "NOTE: This help message is OUT OF DATE.\n\n";
  exit(1);
} elsif ($ARGV[0] eq "--reset"||$ARGV[0] eq "--restart") {
  system("rm prod.*");
  system("rm min.*");
  system("rm equi.*");
  system("rm input.*");
  system("rm qmmm_list");
  system("rm *.sh");
  system("rm force_logfile");
  print "Removed all the old input and batch files.\n";
  exit(1);
}
$force_file = "ums_input";
if (-e $force_file) {
  print "\nThe File 'ums_input' has been detected. Would you like to use this for your distances and forces?\n[ Yes ] >> ";
  $response = <STDIN>;
  chomp $response;
}

if (lc $response eq 'n' || lc $response eq 'no') {
  $use_ff_input = 'off';
  $value=$ARGV[4];
  if ($value eq '') {
    print "What is the minimum distance restraint?\n";
    $value = <STDIN>;
    chomp $value;
    # print "\nCould not identify starting value selection (argument #5). Try again\n\n${help_message}\n";
    # exit(1);
  }
  $max_value=$ARGV[5];
  if ($max_value eq '') {
    print "What is the maximum distance restraint?\n";
    $max_value = <STDIN>;
    chomp $max_value;
    # print "\nCould not identify ending value selection (argument #6). Try again\n\n${help_message}\n";
    # exit(1);
  }
  $type=lc $ARGV[0];
  if ($type eq "distance") {
    $unit='Angstroms';
    $incr=0.1;
  } elsif ($type eq "dihedral") {
    $unit='Degrees';
    $incr=3;
  } else {
    $type='distance';
    $unit='Angstroms';
    print "What distance step do you want to use? (Use no more than 3 decimal places)\n";
    $incr = <STDIN>;
    chomp $incr;
    # print "\nCould not identify type selection (argument #1). Try again\n\n${help_message}\n";
    # exit(1);
  }
} else {
  print "\nUSING INPUT FILE\n\n";
  $type='distance';
  $unit='Angstroms';
  $use_ff_input = 'on';
}
$atoms=$ARGV[3];
if ($atoms eq '') {
  print "Which atoms are being restrained? (Enter as a comma separated list: atom1,atom2)\n";
  $atoms = <STDIN>;
  chomp $atoms;
  # print "\nCould not identify atoms selection (argument #4). Try again\n\n${help_message}\n";
  # exit(1);
}

$name=$ARGV[1];
if ($name eq '') {
  $name = 'a name';
  # print "It's okay. job name is pretty useless";
  # $name = <STDIN>;
  # chomp $name;
  # print "\nCould not identify name selection (argument #2). Try again\n\n${help_message}\n";
  # exit(1);
}
$force=$ARGV[2];
if ($force eq '') {
  if ($use_ff_input ne 'on') {
      print "What is the Force?\n";
      $force = <STDIN>;
      chomp $force;
      print "Would you like to use the Force ${force} for ALL bond distances?\n[ Yes ] >> ";
      $response= <STDIN>;
      chomp $response;
      if (lc $response eq 'no' || lc $response eq 'n' ) {
        $manual_force = "on";
      } else {
        $manual_force = "off";
  }
    }
}


$temp=$ARGV[6];
if ($temp eq '') {
  print "What is the reaction temperature? (Kelvin)\n";
  $temp = <STDIN>;
  chomp $temp;
  # print "\nCould not identify temperature selection (argument #7). Try again\n\n${help_message}\n";
  # exit(1);
}
# $atoms2=$ARGV[7];
# if ($atoms2 eq '') {
#   print ""
#   $type = <STDIN>;
#   chomp $type;
#   # print "\nCould not identify atoms2 selection (argument #8). Try again\n\n${help_message}\n";
#   exit(1);
# }
# $temp=$ARGV[7];
# if ($temp eq '') {
#   print ""
#   $type = <STDIN>;
#   chomp $type;
#   # print "\nCould not identify solvent selection (argument #8). Try again\n\n${help_message}\n";
#   exit(1);
# }


print "What solvent are you using?\n";
print "1. DCM\n";
print "2. Nitromethane\n";
$solvent = <STDIN>;
chomp $solvent;
if (lc $solvent eq 'dcm' || $solvent eq "1") {
  $solventbox = "dcmbox";
  $solvent = "dcmbox";
}
if (lc $solvent eq 'nitromethane' || $solvent eq "2") {
  $solventbox = "nitromethanebox";
  $solvent = "nitromethane";
}

$days="00";
$hrs="01";
$mins="55";
print "Default runtime is set for $days Days $hrs Hrs and $mins Min.\nWould you like to change this?\n[ No ] >> ";
my $response = <STDIN>;
chomp $response;
if (lc $response eq 'yes' || lc $response eq 'y') {
  print "Enter the following variables as 3 DIGIT NUMBERS\n";
  print "How Many Days?\n";
  $days = <STDIN>;
  chomp $days;
  print "How Many Hrs?\n";
  $hrs = <STDIN>;
  chomp $hrs;
  print "How Many Mins?\n";
  $mins = <STDIN>;
  chomp $mins;
}

system('get_atoms --write_file');
open(my $FILE, '<:encoding(UTF-8)', 'qmmm_list');
if (my $row = <$FILE>){
chomp $row;
$qmmm_atoms=$row;
}


# if ($ARGV[7] eq '-c'||$ARGV[7] eq '--confirm') {
print "Is the Following Information Correct?\n\n";
print "Restraint Type: ${type}\n";
# print "Job Name: ${name}\n";
print "Force Constant: ${force}\n";
print "Atom List: ${atoms}\n";
print "Starting Value: ${value}\n";
print "Ending Value: ${max_value}\n";
print "Reaction Temperature: ${temp}\n";
print "Reaction Runtime: ${days}-${hrs}:${mins}\n";
print "QM/MM Atom List: ${qmmm_atoms}\n";
print "[Yes] >> ";
my $response = <STDIN>;
chomp $response;
if (lc $response eq 'no' || lc $response eq 'n') {
  print "\nTry Again.\n";
  exit(1);
}
# }

if ($use_ff_input eq 'on') {
    open(my $FILE, '<:encoding(UTF-8)', 'ums_input');
    chomp (@lines = <$FILE>);
    foreach my $x (@lines) {
      if ($x ne '\n') {
      ($value, $force) = split /\s+/, $x;
      print "$value\t$force\n";
      &use_input_file();
    }
    }
    &finalize();
} else {
&prepare_input();
&finalize();
}

exit(0);

sub use_input_file() {
  &make_initial_files();
  $start_val="${value}";
  $value = sprintf "%.3f", $value;
  print "Processing ${type}: $value\n";
  &write_minimization();
  &write_equilibration();
  &write_production();
  &write_input_file();
  &write_batchfile();
  &force_logfile();
}

sub prepare_input {
  &make_initial_files();
  $start_val="${value}";
    while ($value <= $max_value) { 
      $value = sprintf "%.3f", $value;
      print "Processing ${type}: $value\n";
      &write_minimization();
      &write_equilibration();
      &write_production();
      &write_input_file();
      &write_batchfile();
      &force_logfile();
      $value += $incr;
      if ($manual_force eq "on") {
        $value = sprintf "%.3f", $value;
        print "\nWhat is the Force for ${value}Ã…?\n";
        $force = <STDIN>;
        chomp $force;
      }
    }
}

sub finalize {
  &Wham();
  &sbatch();
  &submit_job();
  print "\n\033[1;31mWould you like to submit this job now?\n [ Yes ] >> \033[0m";
  my $response = <STDIN>;
  chomp $response;
  if (lc $response eq 'no' || lc $response eq 'n') {
    print "\nDone!\n";
  }
  else {
    system("bash submit_job.sh");
    print "\nDone!\n";
  }

  # my $response = <STDIN>;
  # chomp $response;
  # if (lc $response eq 'no' || lc $response eq 'n') {
  # print "\nNot Submitting Job.\n";
  # } else {
  #   system('sbatch submit ');
  # }
}

sub force_logfile {
  open LOGFILE, '>>', 'force_logfile';
  print LOGFILE <<EOF;
${type}_${value}.dat    $force
EOF

}

sub write_minimization {
    open MDINFILE,'>', "min.$value";
    print MDINFILE <<EOF;
2000 step minimization for $value $unit
 &cntrl
  imin = 1, 
  maxcyc=2000, ncyc = 500,
  ntpr = 100, ntwr = 1000,
  ntf = 2, ntc = 2, cut = 8.0,
  ntb = 1, ntp = 0,
  nmropt = 1,
  ifqnt=1
&end
&qmmm
  iqmatoms=$atoms
  qmcharge=1,
  qm_theory='PM3',
  qmcut=8.0
 &end
 &wt 
  type='END',
 &end
DISANG=input.$value
EOF
    close MDINFILE;
}
sub write_equilibration {
    open MDINFILE,'>', "equi.$value";
    print MDINFILE <<EOF;
100 ps NPT equilibration for $value $unit
 &cntrl
  imin = 0, ntx = 1, irest = 0,
  ntpr = 5000, ntwr = 50000, ntwx = 0,
  ntf = 2, ntc = 2, cut = 8.0,
  ntb = 2, nstlim = 50000, dt = 0.002,
  tempi=0.0, temp0 = $temp, ntt = 3,
  gamma_ln = 1.0,
  ntp = 1, pres0 = 1.0, taup = 5.0,
  nmropt = 1, ioutfm=1,
  ifqnt=1
&end
&qmmm
  iqmatoms=$atoms
  qmcharge=1,
  qm_theory='PM3',
  qmcut=8.0
 &end
 &wt 
  type='END',
 &end
DISANG=input.$value
EOF
    close MDINFILE;
}
sub write_production {
    open MDINFILE,'>', "prod.$value";
    print MDINFILE <<EOF;
500 ps NPT production for $value $unit
 &cntrl
  imin = 0, ntx = 5, irest = 1,
  ntpr = 500, ntwr = 10, ntwx = 10,
  ntf = 2, ntc = 2, cut = 8.0,
  ntb = 2, nstlim = 250000, dt = 0.002,
  temp0 = $temp, ntt = 3,
  gamma_ln = 1.0,
  ntp = 1, pres0 = 1.0, taup = 5.0,
  nmropt = 1, ioutfm=1,
  ifqnt=1
&end
&qmmm
  $qmmm_atoms
  qmcharge=1,
  qm_theory='PM3',
  qmcut=8.0
 &end
 &wt
  type='DUMPFREQ', istep1=1,
 &end
 &wt 
  type='END',
 &end
DISANG=input.$value
DUMPAVE=${type}_${value}.dat
EOF
    close MDINFILE;
}
sub write_input_file {
    if ($type eq 'distance') {
      $left    = $value - 0.05;
      $average = $value;
      $right   = $value + 0.05;
    } else {
      $left    = sprintf "%4.1f", $value - 180;
      $average = sprintf "%4.1f", $value;
      $right   = sprintf "%4.1f", $value + 180;
    }
    open DISANG,'>', "input.$value";
    print DISANG <<EOF;
Harmonic restraints for $value $unit
 &rst
  iat=${atoms}
  r1=${left}, r2=${average}, r3=${average}, r4=${right},
  rk2=${force}, rk3=${force},
 &end
EOF
#  &rst
#   iat=${atoms2}
#   r1=${left}, r2=${average}, r3=${average}, r4=${right},
#   rk2=${force}, rk3=${force},
#  &end 
# EOF
    close DISANG;
}

sub write_batchfile {
  # NEED TO EDIT THE SCRIPT HERE
    open BATCHFILE, '>', "${value}_umbrella.sh";
    print BATCHFILE <<EOF;
#!/bin/bash

#SBATCH -C 'avx2'
#SBATCH --time=${days}-${hrs}:${mins}         # time (DD-HH:MM)
#SBATCH --nodes=1 --ntasks-per-node=8
#SBATCH --mem-per-cpu=150M   # memory per CPU core
#SBATCH --mail-user=$username\@byu.edu   # email address
#SBATCH --mail-type=FAIL
#SBATCH --requeue

# Set the max number of threads to use for programs using OpenMP. Should be <= ppn. Does nothing if the program doesn't use OpenMP.
export OMP_NUM_THREADS=\$SLURM_CPUS_ON_NODE

# LOAD MODULES, INSERT CODE, AND RUN YOUR PROGRAMS HERE

type module &>/dev/null
[[ \$? -eq 0 ]] || . /etc/profile  # source /etc/profile if `module` isn't defined

module purge
module load gcc openmpi python amber/18



echo ""
echo "Running Minimization..."
echo ""

mpirun -np 8 sander.MPI -O -i min.$value -p complex.prmtop -c complex.inpcrd -r min_${value}.rst  -o min_${value}.out 

echo ""
echo "Running Equilibration..."
echo ""

mpirun -np 8 sander.MPI -O -i equi.$value -p complex.prmtop -c min_${value}.rst  -r equi_${value}.rst -o equi_${value}.out 

echo ""
echo "Running QM/MM Simulation..."
echo ""

mpirun -np 8 sander.MPI -O -i prod.$value -p complex.prmtop -c equi_${value}.rst -r prod_${value}.rst -o prod_${value}.out -x prod_${value}.mdcrd
EOF

    print BATCHFILE "\necho \"Execution finished\"\n";
    close BATCHFILE;
}

sub sbatch {
  open SBATCH, '>', "sbatch_submit.sh";
  print SBATCH <<EOF
#!/bin/bash
DIR=\$(pwd)
echo \$DIR >> /zhome/$username/storage/results/batch_submit_log.txt
JOB1=\$(sbatch init.sh | cut -f 4 -d' ')
joblist=\$JOB1
echo \$JOB1
counter=0
for i in `ls *_umbrella.sh`; do
  case \$1 in
  --test)
  echo "Submitted \$i"
  ;;
  * )
  jid=\$(sbatch -d afterok:\$JOB1 \$i | cut -f 4 -d' ')
  echo $jid >> /zhome/$username/storage/results/batch_submit_log.txt
  joblist="\${joblist},\${jid}"
  ;;
  esac
  counter=`python -c "print(\$counter+1)"`
done

case \$1 in
--test)
echo "\${counter} jobs would have been submitted"
;;
* )
echo "\${counter} jobs submitted"
;;
esac

echo "" >> /zhome/$username/storage/results/batch_submit_log.txt
jid=\$(sbatch -d afterok:\$joblist WHAM.sh | cut -f 4 -d' ')
EOF
}

sub Wham {
  open WHAM, '>', "WHAM.sh";
  print WHAM <<EOF
#!/bin/bash

#SBATCH -C 'rhel7&avx2'
#SBATCH --time=00-02:00         # time (DD-HH:MM)
#SBATCH --nodes=1 --ntasks-per-node=1
#SBATCH --mem-per-cpu=2G   # memory per CPU core
#SBATCH --mail-user=$username\@byu.edu   # email address
#SBATCH --mail-type=FAIL
#SBATCH --requeue

collect_wham_data -T $temp
EOF
}

sub make_initial_files {
  open INIT, '>', "init.sh";
  print INIT <<EOF
#!/bin/bash

#SBATCH -C 'rhel7&avx2'
#SBATCH --time=00-01:00         # time (DD-HH:MM)
#SBATCH --nodes=1 --ntasks-per-node=8
#SBATCH --mem-per-cpu=70M   # memory per CPU core
#SBATCH --mail-user=$username\@byu.edu   # email address
#SBATCH --mail-type=FAIL
#SBATCH --requeue
#SBATCH --qos=test

# Set the max number of threads to use for programs using OpenMP. Should be <= ppn. Does nothing if the program doesn't use OpenMP.
export OMP_NUM_THREADS=\$SLURM_CPUS_ON_NODE

# LOAD MODULES, INSERT CODE, AND RUN YOUR PROGRAMS HERE

type module &>/dev/null
[[ \$? -eq 0 ]] || . /etc/profile  # source /etc/profile if `module` isn't defined

module purge
module load gcc openmpi python amber/18

cp /zhome/jparkman/zscripts/collect_wham_data.sh .

FORMAT=mol2

MOL2FILES=( \$(wc -l *.\${FORMAT} | sort -g | awk '{print \$2}') )
SUB=\${MOL2FILES[0]%.\${FORMAT}}
FILENAME=\${MOL2FILES[1]%.\${FORMAT}}

# FILENAME=\$1
# FORMAT=\$2
# SOLVENTBOX=\$3
# PARAMSOLVENT=\$4
# SUB=\$5

# FILENAME=p2
# FORMAT=mol2
SOLVENTBOX=$solventbox
PARAMSOLVENT=${solvent}.frcmod
# SUB="STA"


rm leap_topsol.in

parmchk2 -i \$FILENAME.\$FORMAT -f \$FORMAT -o \$FILENAME.frcmod
parmchk2 -i \$SUB.\$FORMAT -f \$FORMAT -o \$SUB.frcmod

echo "source leaprc.protein.ff14SB
source leaprc.gaff2
addPath /zhome/$username/storage/modified_solutions
loadamberparams \$FILENAME.frcmod
loadamberparams \$PARAMSOLVENT
loadamberparams \$SUB.frcmod
loadoff \$SOLVENTBOX.off
peptide = load\$FORMAT \$FILENAME.\$FORMAT
sub = load\$FORMAT \$SUB.\$FORMAT
complex = combine {peptide sub}
savemol2 complex complex0.mol2 0
solvateBox complex \$SOLVENTBOX 12 0.8
saveamberparm complex complex.prmtop complex.inpcrd
savemol2 complex complex1.mol2 1
savemol2 complex complex2.mol2 0
quit" >> leap_topsol.in


tleap -f leap_topsol.in
EOF

}

sub submit_job {
  my $eofvar = 'EOF';
  open SUBMIT, '>', "submit_job.sh";
  print SUBMIT <<EOF
#!/bin/bash

USER=`whoami`

FSLDIR=\$(pwd)
echo "\$FSLDIR"


echo "\$FSLDIR" | tee filefolder.txt > /dev/null
echo "\$FSLDIR" | tee filefolder1.txt > /dev/null

sed -i 's/home/zhome/g' filefolder.txt
sed -i 's/storage/compute/g' filefolder.txt

FSLDIRNEW1=\$(cat filefolder.txt)

sed -i 's/home/zhome/g' filefolder1.txt
sed -i 's/storage/compute/g' filefolder1.txt
sed -i '\$s/\\w*\$//' filefolder1.txt

FSLDIRNEW=\$(cat filefolder1.txt)

ssh \${USER}\@ssh.rc.byu.edu mkdir -p \$FSLDIRNEW1

rsync --update -raz --progress \$FSLDIR \${USER}\@ssh.rc.byu.edu:\$FSLDIRNEW

ssh \${USER}\@ssh.rc.byu.edu "rm -rf \$FSLDIRNEW1/filefolder.txt \$FSLDIRNEW1/filefolder1.txt \$FSLDIRNEW1/submit_job.sh"

ssh \${USER}\@ssh.rc.byu.edu /bin/bash << EOF
cd \$FSLDIRNEW1
bash sbatch_submit.sh
$eofvar

rm filefolder.txt
rm filefolder1.txt
echo "Done"


EOF


}



